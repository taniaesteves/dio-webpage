extends layout.pug

block navbar-options
    li.nav-item.active
        a.nav-link(href='#features') Features
    li.nav-item
        a.nav-link(href='#howitworks') How it works
    li.nav-item
        a.nav-link(href='#usecases') Use cases

block content
    h1#dio-description(style='text-align: center;') DIO
    h3(style='text-align: center;')
        em Diagnosing applications I/O behavior <br>through system call observability

    br
    p
        | DIO is a generic tool for observing and diagnosing applications storage I/O.
        | It is designed to be used by applications developers and users to understand how applications interact with storage systems.
        | By combining system call tracing with a customizable data analysis and visualization pipeline, DIO provide non-intrusive and comprehensive I/O diagnosis for applications using in-kernel POSIX storage systems (e.g., ext4, linux block device).


    br
    h2#features Features

    ul
        li
            | <strong>Generic and non-intrusive</strong>: DIO can be used to observe I/O system calls made by any application interacting with in-kernel storage systems without requiring any modification to the application code.
        li
            | <strong>Flexible</strong>: DIO can be configured to collect only the information that is relevant to the user. Namely, DIO allows users to filter events based on:
            ul
                li process name (command)
                li process/thread IDs
                li system call types
                li file paths
        li
            | <strong>Comprehensive</strong>: DIO collects a wide range of information about the I/O system calls made by applications. Namely, DIO collects:
            ul
                li system call type, arguments and return value
                li process name (command), process ID, thread ID
                li start and end timestamps
                li additional context from the kernel:
                ul
                    li file type
                    li file offset
                    li file tag
        li
            | <strong>Pratical and timely analysis</strong>: DIO provides a full pipeline to capture, analyze and visualize collected data in a timely manner. Namely, DIO provides:
            ul
                li a <strong><em>tracer</em></strong> component that intercepts system calls made by applications.
                li a <strong><em>backend</em></strong> component that stores collected data in a database and enables users to query traced data, apply filters to analyze specific information, and correlate different types of data.
                li a <strong><em>visualizer</em></strong> component that allows users to query the database and visualize the results in a web interface and build customized visualizations.
    .line
    h2#howitworks How it works

    img(src='/image/DIO-design.png', style='width: 30%; display: block; margin-left: auto; margin-right: auto;')
    p(style='text-align: center;') Figure 1. DIO architecture and flow of events


    p
        |

    br
    h4 Tracer
    p
        | The <em>tracer</em> component relies on the eBPF technology to intercept system calls done by applications in a non-intrusive way.
        | Briefly, it comprises a set of eBPF programs that, at the initialization phase (
        span.whitecircle 1
        | ), are attached to system calls tracepoints.
        | These eBPF programs will collect the relevant information about the system calls (in kernel) and place it in a ring buffer (
        span.whitecircle 2
        | ) to be accessed in user space.
        | At user space, the tracer is constantly pooling events from the ring buffer (
        span.whitecircle 3
        | ) and sending them to the backend (
        span.blackcircle 1
        | ) for storage.

    br
    h4 Backend
    p
        | The <em>backend</em> component persists and indexes events (
        span.blackcircle 2
        | ), and allows users to query and summarize (e.g., aggregate) stored information (
        span.blackcircle 3
        | ).
        | It uses the Elasticsearch distributed engine for storing and processing large volumes of data.
        | By providing an interface for searching, querying, and updating data, the backend allows users to develop and integrate customized data correlation algorithms.

    br
    h4 Visualizer
    p
        | The <em>visualizer</em> component provides near real-time visualization of the traced events by querying the backend (
        span.blackcircle 4
        | ).
        | It uses Kibana, the data visualization dashboard software for Elasticsearch, which offers a web interface for data exploration and analysis. Moreover, it allows users to select specific types of data (e.g., system call type, arguments) to build different and customized representations.


    .line

    h2#usecases DIO Use cases

    p DIO was testes and validated with four production-level systems.

    br
    h4 Redis
    p
        | Diagnosis of inefficient use of system calls that lead to poor storage performance
        a(href='/redis', target='_blank', style='color: blue;')  (see more).

    br
    h4 Elasticsearch
    p
        | Observation of unexpected file access patterns caused by the usage of high-level libraries that lead to redundant I/O calls.
        a(href='/elasticsearch', target='_blank', style='color: blue;')  (see more).

    br
    h4 RocksDB
    p
        | Root cause analysis of resource contention in multi threaded I/O that leads to high tail latency for user workloads.
        a(href='/rocksdb', target='_blank', style='color: blue;')  (see more).

    br
    h4 Fluent Bit
    p
        | Root cause analysis of data loss caused by erroneous file accesses.
        a(href='/fluentbit', target='_blank', style='color: blue;')  (see more).

